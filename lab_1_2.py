"""
Лабораторная работа №2

Условие задачи:
Заданы координаты точек треугольника на плоскости,
вычислить длины сторон треугольника, найти медиану проведенную
из наиболельшего угла. При вычислении использовать целочисленные значения.
Ввести координату точки и определить, находится ли она в треугольнике,
и если находится, то вычислить расстояние от точки до ближайшей стороны треугольника.

Лютин Я.С., группа ИУ7-11, 20.09.2015
"""

from math import sqrt

print("Введите координаты точек треугольника через пробел")

#ввод каждой из точек треугольника
x1 ,y1 = map(int, input("Первая точка: ").split())
x2 ,y2 = map(int, input("Вторая точка: ").split())
x3 ,y3 = map(int, input("Третья точка: ").split())

#x1, y1 = -1,-5
#x2, y2 = -1, -1
#x3, y3 = -5, -1

#вычисление длин каждой из его сторон
a = sqrt((x1 - x2)**2 + (y1 - y2)**2)
b = sqrt((x2 - x3)**2 + (y2 - y3)**2)
c = sqrt((x1 - x3)**2 + (y1 - y3)**2)

#проверка на допустимость существования такого треугольника
if a + b <= c or a + c <= b or b + c <= a:
    print("Такого треугольника не существует")
else:

    print("Длины всех стороны равны: ", "{:.2f}, {:.2f}, {:.2f}".format(a, b, c))

    t = [0, 0]
    
    #нахождение большей длины и медианы проведенной из большего угла
    if a >= b >= c or a >= c >= b:
        max_s = a
        t[0] = (x1 + x2)/2
        t[1] = (y1 + y2)/2
        md_s = sqrt((x3 - t[0])**2 + (y3 - t[1])**2)
        
    elif b >= a >= c or b >= c >= a:
        max_s = b
        t[0] = (x2 + x3)/2
        t[1] = (y2 + y3)/2
        md_s = sqrt((x1 - t[0])**2 + (y1 - t[1])**2)
        
    elif c >= b >= a or c >= a >= b:
        max_s = c
        t[0] = (x1 + x3)/2
        t[1] = (y1 + y3)/2
        md_s = sqrt((x2 - t[0])**2 + (y2 - t[1])**2)
        

    #print(t[0], t[1])

        
    print("Наибольшая сторона треугольника равна ", "{:.2f}".format(max_s))

    print("Длина медианы, проведенной из наибольшего угла равна ", "{:.2f}".format(md_s))

    x0 ,y0 = map(int, input("Введите через пробел координаты дополнительной точки: ").split())
    
    p = [0, 0, 0]

    
    #проверка, находится ли точка внутри или вне треугольника 
    p[0] = (x1 - x0) * (y2 - y1) - (x2 - x1) * (y1 - y0)
    p[1] = (x2 - x0) * (y3 - y2) - (x3 - x2) * (y2 - y0)
    p[2] = (x3 - x0) * (y1 - y3) - (x1 - x3) * (y3 - y0)

    #print(p[0], p[1], p[2])

    if p[0] == 0 or p[1] == 0 or p[2] == 0:
        print("Точка лежит на одной из сторон треугольника,")
        print("следовательно расстояние от этой точки до ближайшей стороны равняется нулю.")
    else:
        if (p[0] >= 0 and p[1] >= 0 and p[2] >= 0) or (p[0] <= 0 and p[1] <= 0 and p[2] <= 0):

            d = [0, 0, 0]

            #нахождение расстояния от этой точки до ближайшей стороны
            d1 = abs(((y1 - y2) * x0 - (x2 - x1) * y0 + (x1 * y2 - x2 * y1)) / a)
            d2 = abs(((y1 - y2) * x0 + (x2 - x1) * y0 + (x1 * y2 - x2 * y1)) / a)
            #print(d1, d2)
            if d1 < d2:
                d[0] = d1
            else:
                d[0] = d2

            d1 = abs(((y2 - y3) * x0 - (x2 - x3) * y0 + (x2 * y3 - x3 * y2)) / b)
            d2 = abs(((y2 - y3) * x0 + (x2 - x3) * y0 + (x2 * y3 - x3 * y2)) / b)
            #print(d1, d2)
            if d1 < d2:
                d[1] = d1
            else:
                d[1] = d2
        
            d1 = abs(((y3 - y1) * x0 - (x3 - x1) * y0 + (x3 * y1 - x1 * y3)) / c)
            d2 = abs(((y3 - y1) * x0 + (x3 - x1) * y0 + (x3 * y1 - x1 * y3)) / c)
            #print(d1, d2)
            if d1 < d2:
                d[2] = d1
            else:
                d[2] = d2

            if d[0] <= d[1] <= d[2] or d[0] <= d[2] <= d[1]:
                min_d = d[0]
            elif d[1] <= d[0] <= d[2] or d[1] <= d[2] <= d[0]:
                min_d = d[1]
            elif d[2] <= d[1] <= d[0] or d[2] <= d[0] <= d[1]:
                min_d = d[2]
        
            print("Точка находится внутри треугольника")
            print("Расстояние от точки до каждой из сторон ", "{:.2f}, {:.2f}, {:.2f}".format(d[0], d[1], d[2]))
            print("Расстояние от точки до ближайшей стороны ", "{:.2f}".format(min_d))
        else:
            print("Точка находится вне треугольника")
           

